#!/bin/ash
SCRIPT=${0##*/}
SCRIPT_VERSION="1.0"

#  change seperator from whitespace to not
SAVEIFS=$IFS
IFS_NEWLINES=$(echo -en "\n\b")
IFS=${IFS_NEWLINES}

NOW=`date +%y%m%d-%H%M%S`

OUTFILE=${SCRIPT}-${NOW}.lst


# =============================================================================
# Usage info
#
show_help() {
	# takes $1 as as desired exit code
ERROR_LEVEL=$1
cat  >&2 << EOF

Usage: ${SCRIPT} [-dhnv] 

 $SCRIPT v${SCRIPT_VERSION} - Generate command-output-list to attach to bug report
 
where:
    -d          Enable script-(d)ebug output
    -h          Display this (h)elp and exit
    -n          no-do: list-to-screen but don't run the commands
    -v          Enable (v)erbose mode. Can be used multiple times for increased
                 verbosity.
                 
Typical Use Cases:

	${SCRIPT}      		# run commands and write report file
	
EOF
	exit ${ERROR_LEVEL}
}

# =============================================================================
#  Simple message printing functions
#
infoMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}:INFO- ${MESSAGE}" >&2
}

warningMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}:WARNING- ${MESSAGE}" >&2
}

errorMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}:ERROR- ${MESSAGE}" >&2
}

fatalMessage () {
# takes $1 as message text and $2 as exit code
	MESSAGE=$1
	ERROR_LEVEL=$2
	errorMessage "${MESSAGE}"
	exit ${ERROR_LEVEL}
}

debugMessage () {
# takes $1 as message text and (optional) $2 as gating debug level
#  ONLY displays message if DEBUG is enabled
## TODO add gating level logic
	MESSAGE=$1
	GATING_LEVEL=$2
	if [ -n "${DEBUG}" ]; then
		echo "${SCRIPT}(DBG): ${MESSAGE}" >&2
	fi
}

progressMessage () {
# takes $1 as message text
	MESSAGE=$1
	echo "${SCRIPT}: ${MESSAGE}" 
}

verboseMessage () {
# takes $1 as message text and $2 as gating verbose level
#   if gating <= current then display message
## TODO add gating level logic
	MESSAGE=$1
	GATING_LEVEL=$2
	#echo "${SCRIPT}:Verbose(${GATING_LEVEL})- ${MESSAGE}" >&2
	
	if [ ${VERBOSE_LEVEL} -gt 0 ]; then
		echo "${SCRIPT}:Verbose- ${MESSAGE}" >&2
	fi
}

# =============================================================================
# Initialize our variables
#
export DEBUG=""
export DEBUG_LEVEL=0
export VERBOSE_LEVEL=0

export ACTION_REQUESTED="no"
export WITHOUT_DOING=""



# =============================================================================
#  Process the command line arguments
#
OPTIND=1 # Reset is necessary if getopts was used previously in the script.  It is a good idea to make this local in a function.
while getopts "hdnv" opt; do
    case "$opt" in
        d)
        	  export DEBUG_LEVEL=$((DEBUG_LEVEL+1))
        	  export DEBUG=yes
        	  if [ ${DEBUG_LEVEL} -eq 1 ]; then
        	  	# when first setting debug set this too
        	  	export VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
        	  fi
            ;;
        h)
            show_help 0
            ;;
        n)
			export ACTION_REQUESTED="yes"
			export WITHOUT_DOING="yes"
			if [ $VERBOSE_LEVEL -eq 0 ]; then
    	 	  export VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
    	 	fi
         	progressMessage "* Mode NO-DO (will not actually run) *"
           ;;
        v)
    	  export VERBOSE_LEVEL=$((VERBOSE_LEVEL+1))
    	  progressMessage "verbose set to ${VERBOSE_LEVEL}!"
            ;;
        '?')
        	  echo "$SCRIPT: Question Mark!" >&2
            show_help 0
            ;;
    esac
done

shift "$((OPTIND-1))" # Shift off the options and optional --.


# =============================================================================
#  final checks and setup before execution
#
if [ -n "$DEBUG" ]; then
	debugMessage "ending with p0=$0 p1=$1 p2=$2 p3=$3 p4=$4 ..."
	echo ""
fi

EXTRA_ARG=$1
if [ -n "${EXTRA_ARG}" ]; then
	errorMessage "Unexpected argument [${EXTRA_ARG}], aborting" 
	show_help 2
fi

#if [ "${ACTION_REQUESTED}" = "no" ]; then
#	echo ""
#	progressMessage "No Actions Specified..."
#	#show_help 0	
#fi

##if [ "${WITHOUT_DOING}" = "yes" ]; then
#	verboseMessage "Test Complete"
#	exit 0
#fi

# =============================================================================


showCommand () {
	COMMAND=$@
	if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
		#echo "" 
		echo "# ${COMMAND}"
	else
		if [ -z "${WITHOUT_DOING}" ]; then
		  ## do this quietly...
		  	#echo "" >>${OUTFILE} 2>&1
			echo "# ${COMMAND}" >>${OUTFILE} 2>&1
			echo "  " >>${OUTFILE} 2>&1
		else 
		   echo "${SCRIPT}-(NODO): # ${COMMAND}"
		fi
	fi
}

endCommand () {
	COMMAND=$@
	if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
		echo "" 
		echo "" 
	else
		if [ -z "${WITHOUT_DOING}" ]; then
		  ## do this quietly...
			echo "" >>${OUTFILE} 2>&1
			echo " ----" >>${OUTFILE} 2>&1
			echo "" >>${OUTFILE} 2>&1
		fi
	fi
}

#  mark our outfile
RUN_DATE=`date +%y/%m/%d-%H:%M:%S`
if [ ${VERBOSE_LEVEL} -eq 0 -a -z "${WITHOUT_DOING}" ]; then
echo "# SCRIPT ${SCRIPT} v${SCRIPT_VERSION} run ${RUN_DATE}" >>${OUTFILE} 2>&1
echo "# ----------------------------------------------------------------------" >>${OUTFILE} 2>&1
echo "" >>${OUTFILE} 2>&1
fi


# ----------------------------------------------------------------------
#  get device model
#
showCommand "/bin/grep sysfs /etc/config/system | /usr/bin/awk '{ print $3 }' | /usr/bin/tr -d \' | /usr/bin/cut -f1 -d:"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
/bin/grep sysfs /etc/config/system | /usr/bin/awk '{ print $3 }' | /usr/bin/tr -d \' | /usr/bin/cut -f1 -d:
else 
/bin/grep sysfs /etc/config/system | /usr/bin/awk '{ print $3 }' | /usr/bin/tr -d \' | /usr/bin/cut -f1 -d: >>${OUTFILE} 2>&1
fi
endCommand
# ----------------------------------------------------------------------
# get OS name - version
#
OS_NAME="openwrt"
showCommand "echo ${OS_NAME}"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
echo "${OS_NAME}"
else 
echo "${OS_NAME}" >>${OUTFILE} 2>&1
fi
endCommand

# ----------------------------------------------------------------------
#  get onion release and build
#
showCommand "/usr/bin/oupgrade -v | tr -d '>'"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
/usr/bin/oupgrade -v | tr -d '>'
else 
/usr/bin/oupgrade -v | tr -d '>' >>${OUTFILE} 2>&1
fi
endCommand

# ----------------------------------------------------------------------
#  get host release (version)
#
showCommand "/bin/uname -r"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
/bin/uname -r 
else 
/bin/uname -r >>${OUTFILE} 2>&1
fi
endCommand

# ----------------------------------------------------------------------
#  get uProcessor type
#
showCommand "/bin/uname -m"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
/bin/uname -m 
else 
/bin/uname -m >>${OUTFILE} 2>&1
fi
endCommand

# ----------------------------------------------------------------------

showCommand "cat /etc/config/system | /bin/grep host | /usr/bin/awk '{ print $3 }' | /usr/bin/tr -d \'"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
cat /etc/config/system | /bin/grep host | /usr/bin/awk '{ print $3 }' | /usr/bin/tr -d \'
else 
cat /etc/config/system | /bin/grep host | /usr/bin/awk '{ print $3 }' | /usr/bin/tr -d \' >>${OUTFILE} 2>&1
fi
endCommand

# ----------------------------------------------------------------------

showCommand "/usr/bin/uptime"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
/usr/bin/uptime
else 
/usr/bin/uptime >>${OUTFILE} 2>&1
fi
endCommand

# ----------------------------------------------------------------------

showCommand "/sbin/ifconfig"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
/sbin/ifconfig
else 
/sbin/ifconfig >>${OUTFILE} 2>&1
fi
endCommand

# ----------------------------------------------------------------------

showCommand "/sbin/ifconfig | /bin/egrep 'Link|flags|inet|ether' | /bin/egrep -v -i 'lo:|loopback|inet6|\:\:1|127\.0\.0\.1'"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
/sbin/ifconfig | /bin/egrep 'Link|flags|inet|ether' | /bin/egrep -v -i 'lo:|loopback|inet6|\:\:1|127\.0\.0\.1'
else 
/sbin/ifconfig | /bin/egrep 'Link|flags|inet|ether' | /bin/egrep -v -i 'lo:|loopback|inet6|\:\:1|127\.0\.0\.1' >>${OUTFILE} 2>&1
fi
endCommand

# ----------------------------------------------------------------------

showCommand "/sbin/route"
if [ ${VERBOSE_LEVEL} -gt 0 -a -z "${WITHOUT_DOING}" ]; then
/sbin/route
else 
/sbin/route >>${OUTFILE} 2>&1
fi
endCommand

# ----------------------------------------------------------------------

if [ -f ${OUTFILE} ]; then
	progressMessage "Wrote ${OUTFILE}"
fi

#  restore separator
IFS=$SAVEIFS

progressMessage "Done"
exit 0